---
globs: frontend/**/*.tsx,frontend/**/*.ts
description: React component development standards and patterns
---

# React Component Standards

## Component Structure
```typescript
// 1. Imports
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { PlaylistCard } from './playlist-card';

// 2. Types
interface PlaylistSelectorProps {
  playlists: SpotifyPlaylist[];
  onSelectionChange: (selectedIds: string[]) => void;
  isLoading?: boolean;
}

// 3. Component
export function PlaylistSelector({ 
  playlists, 
  onSelectionChange, 
  isLoading = false 
}: PlaylistSelectorProps) {
  // 4. State
  const [selectedIds, setSelectedIds] = useState<string[]>([]);

  // 5. Effects
  useEffect(() => {
    onSelectionChange(selectedIds);
  }, [selectedIds, onSelectionChange]);

  // 6. Handlers
  const handleToggleSelection = (playlistId: string) => {
    setSelectedIds(prev => 
      prev.includes(playlistId)
        ? prev.filter(id => id !== playlistId)
        : [...prev, playlistId]
    );
  };

  // 7. Render
  if (isLoading) {
    return <PlaylistSkeleton />;
  }

  return (
    <div className="space-y-4">
      {playlists.map(playlist => (
        <PlaylistCard
          key={playlist.id}
          playlist={playlist}
          isSelected={selectedIds.includes(playlist.id)}
          onToggle={() => handleToggleSelection(playlist.id)}
        />
      ))}
    </div>
  );
}
```

## Component Patterns

### Server Components (Default)
```typescript
// Use Server Components by default
export default async function PlaylistsPage() {
  const playlists = await getPlaylists();
  
  return (
    <div>
      <h1>Your Playlists</h1>
      <PlaylistSelector playlists={playlists} />
    </div>
  );
}
```

### Client Components (When Needed)
```typescript
'use client';

import { useState } from 'react';

export function InteractivePlaylistCard({ playlist }: { playlist: SpotifyPlaylist }) {
  const [isExpanded, setIsExpanded] = useState(false);
  
  return (
    <div className="border rounded-lg p-4">
      <h3>{playlist.name}</h3>
      {isExpanded && <p>{playlist.description}</p>}
      <button onClick={() => setIsExpanded(!isExpanded)}>
        {isExpanded ? 'Collapse' : 'Expand'}
      </button>
    </div>
  );
}
```

## Custom Hooks
```typescript
// Custom hook for Spotify API calls
export function useSpotifyPlaylists() {
  const [playlists, setPlaylists] = useState<SpotifyPlaylist[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchPlaylists() {
      try {
        setLoading(true);
        const data = await fetch('/api/playlists').then(res => res.json());
        setPlaylists(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch playlists');
      } finally {
        setLoading(false);
      }
    }

    fetchPlaylists();
  }, []);

  return { playlists, loading, error, refetch: () => fetchPlaylists() };
}
```

## Error Boundaries
```typescript
'use client';

import { Component, ReactNode } from 'react';

interface ErrorBoundaryProps {
  children: ReactNode;
  fallback?: ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="p-4 border border-red-200 rounded-lg bg-red-50">
          <h2 className="text-red-800 font-semibold">Something went wrong</h2>
          <p className="text-red-600">{this.state.error?.message}</p>
        </div>
      );
    }

    return this.props.children;
  }
}
```

## Loading States
```typescript
export function PlaylistSkeleton() {
  return (
    <div className="space-y-4">
      {Array.from({ length: 3 }).map((_, i) => (
        <div key={i} className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
        </div>
      ))}
    </div>
  );
}
```

## Form Handling
```typescript
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const playlistSchema = z.object({
  name: z.string().min(1, 'Playlist name is required'),
  description: z.string().optional(),
  public: z.boolean().default(false),
});

type PlaylistFormData = z.infer<typeof playlistSchema>;

export function CreatePlaylistForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<PlaylistFormData>({
    resolver: zodResolver(playlistSchema),
  });

  const onSubmit = async (data: PlaylistFormData) => {
    try {
      await fetch('/api/playlists', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
    } catch (error) {
      console.error('Failed to create playlist:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label htmlFor="name">Playlist Name</label>
        <input
          {...register('name')}
          className="border rounded px-3 py-2 w-full"
        />
        {errors.name && (
          <p className="text-red-500 text-sm">{errors.name.message}</p>
        )}
      </div>
      
      <button
        type="submit"
        disabled={isSubmitting}
        className="bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {isSubmitting ? 'Creating...' : 'Create Playlist'}
      </button>
    </form>
  );
}
```

## Performance Optimization
```typescript
// Memoization for expensive calculations
const MemoizedPlaylistCard = React.memo(PlaylistCard, (prevProps, nextProps) => {
  return prevProps.playlist.id === nextProps.playlist.id &&
         prevProps.isSelected === nextProps.isSelected;
});

// Lazy loading for heavy components
const HeavyComponent = React.lazy(() => import('./heavy-component'));

// Virtual scrolling for large lists
import { FixedSizeList as List } from 'react-window';

function VirtualizedPlaylistList({ playlists }: { playlists: SpotifyPlaylist[] }) {
  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => (
    <div style={style}>
      <PlaylistCard playlist={playlists[index]} />
    </div>
  );

  return (
    <List
      height={600}
      itemCount={playlists.length}
      itemSize={120}
      width="100%"
    >
      {Row}
    </List>
  );
}
```

## Accessibility
```typescript
export function AccessibleButton({ 
  children, 
  onClick, 
  disabled = false,
  ariaLabel 
}: {
  children: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
  ariaLabel?: string;
}) {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      aria-label={ariaLabel}
      className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      {children}
    </button>
  );
}
```